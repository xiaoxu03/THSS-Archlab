                      | # Execution begins at address 0 
  0x000:              | 	.pos 0 
  0x000:              | init:	
  0x000: 30f400010000 |     irmovl Stack, %esp  	# Set up stack pointer  
  0x006: 30f500010000 | 	irmovl Stack, %ebp  	# Set up base pointer   
  0x00c: 802c000000   | 	call Main		        # Execute main program
  0x011: 00           | 	halt			        # Terminate program 
                      | 
                      | # Elements defining the stack
  0x014:              |     .align 4
                      | # Source block
  0x014:              | src:
  0x014: 0a000000     |     .long   0x00a
  0x018: b0000000     |     .long   0x0b0
  0x01c: 000c0000     |     .long   0xc00
                      | # Destination block
  0x020:              | dest:
  0x020: 11010000     |     .long   0x111
  0x024: 22020000     |     .long   0x222
  0x028: 33030000     |     .long   0x333
                      | 
  0x02c:              | Main:
  0x02c: a05f         |     pushl   %ebp            # Save old base pointer
  0x02e: 2045         |     rrmovl  %esp, %ebp      # Set up new base pointer
  0x030: 30f203000000 |     irmovl  $3, %edx        # %edx = len
  0x036: a02f         |     pushl   %edx            # len = 3
  0x038: 30f220000000 |     irmovl  dest, %edx      # %edx = &dest
  0x03e: a02f         |     pushl   %edx            # dest = &dest
  0x040: 30f214000000 |     irmovl  src, %edx       # %edx = &src
  0x046: a02f         |     pushl   %edx            # src = &src
  0x048: 8052000000   |     call    Copy_Block      # Sum_List(ele1)
  0x04d: 2054         |     rrmovl  %ebp, %esp      # Recovery %esp
  0x04f: b05f         |     popl    %ebp            # Recory %ebp
  0x051: 90           |     ret
                      | 
                      |     # int copy_block(int *src, int *dest, int len)
  0x052:              | Copy_Block:
  0x052: a05f         |     pushl   %ebp            # Save old base pointer
  0x054: 2045         |     rrmovl  %esp, %ebp      # Set up new base pointer
  0x056: 501508000000 |     mrmovl  8(%ebp), %ecx   # %ecx = src
  0x05c: 50250c000000 |     mrmovl  12(%ebp), %edx  # %edx = dest
  0x062: 507510000000 |     mrmovl  16(%ebp), %edi  # %edi = len
  0x068:              | Loop:
  0x068: 6277         |     andl    %edi, %edi      # Set condition codes
  0x06a: 7392000000   |     je      End             # Return if %edi = 0
  0x06f: 500100000000 |     mrmovl  (%ecx), %eax    # %eax = src[len - %edi]
  0x075: 400200000000 |     rmmovl  %eax, (%edx)    # dest[len - %edi] = src[len - %edi]
  0x07b: 30f3ffffffff |     irmovl  $-1, %ebx       # %ebx = -1
  0x081: 6037         |     addl    %ebx, %edi      # %edi = %edi - 1
  0x083: 30f304000000 |     irmovl  $4, %ebx        # %ebx = 4
  0x089: 6031         |     addl    %ebx, %ecx      # %ecx = %ecx + 4
  0x08b: 6032         |     addl    %ebx, %edx      # %edx = %edx + 4
  0x08d: 7068000000   |     jmp     Loop
  0x092:              | End:
  0x092: 2054         |     rrmovl  %ebp, %esp      # Recovery %esp
  0x094: b05f         |     popl    %ebp            # Recory %ebp
  0x096: 90           |     ret                     # Return
                      | 
                      | # The stack starts here and grows to lower addresses
  0x100:              | 	.pos 0x100		
  0x100:              | Stack:	 
